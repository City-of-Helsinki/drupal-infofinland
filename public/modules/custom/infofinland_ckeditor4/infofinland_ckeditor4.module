<?php

/**
 * @file
 * Contains editorial alterations.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\helfi_api_base\Link\UrlHelper;
use Drupal\select2_icon\Plugin\Field\FieldType\Select2Icon;

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add a title, design and target fields to EditorLinkDialog.
 */
function infofinland_ckeditor4_form_editor_link_dialog_alter(&$form, FormStateInterface $form_state) {

  if (isset($form_state->getUserInput()['editor_object'])) {
    $input = $form_state->getUserInput()['editor_object'];
    $form_state->set('link_element', $input);
    $form_state->setCached(TRUE);
  }
  else {
    // Retrieve the link element's attributes from form state.
    $input = $form_state->get('link_element') ?: [];
  }

  // Helper function to retrieve form field default values.
  $get_default_value = function ($attribute_name, $fallback = '') use ($input) {
    return !empty($input[$attribute_name]) ? $input[$attribute_name] : $fallback;
  };

  $form['#attached']['library'][] = 'infofinland_ckeditor4/modal_window_position';
  $form['#attached']['library'][] = 'infofinland_ckeditor4/link_plugin_enhancements';

  $form['attributes']['data-link-text'] = [
    '#type' => 'textfield',
    '#title' => t('Link text'),
    '#default_value' => $get_default_value('data-link-text'),
    '#maxlength' => 512,
  ];

  $form['attributes']['data-protocol'] = [
    '#type' => 'select',
    '#title' => t('Protocol'),
    '#default_value' => $get_default_value('data-protocol'),
    '#options' => [
      'false' => t('Select'),
      'https://' => t('https://'),
      'http://' => t('http://'),
      'tel:' => t('tel:'),
      'mailto:' => t('mailto:'),
    ],
    '#weight' => -100,
  ];

  $form['attributes']['data-design'] = [
    '#type' => 'select',
    '#title' => t('Design'),
    '#default_value' => $get_default_value('data-design'),
    '#options' => [
      'link' => t('Default'),
      'hds-button hds-button--primary' => t('Button primary'),
      'hds-button hds-button--secondary' => t('Button secondary'),
      'hds-button hds-button--supplementary' => t('Button supplementary'),
    ],
    '#weight' => 1,
  ];

//  $form['attributes']['data-selected-icon'] = [
//    '#title' => t('Icon'),
//    '#type' => 'select2_icon_element',
//    '#default_value' => $get_default_value('data-selected-icon', NULL),
//    '#options' => Select2Icon::loadIcons(),
//    '#weight' => 2,
//  ];

  $form['attributes']['target'] = [
    '#title' => t('Open in new window/tab'),
    '#type' => 'checkbox',
    '#default_value' => $get_default_value('target', FALSE),
    '#return_value' => '_blank',
    '#weight' => 3,
  ];

  $form['attributes']['target_check'] = [
    '#title' => t('The link meets the accessibility requirements'),
    '#description' => t('I have made sure that the description of this link clearly states that it will open in a new tab. <a href="@wcag-techniques" target="_blank">See WCAG 3.2.5 accessibility requirement (the link opens in a new tab).</a>', [
      '@wcag-techniques' => 'https://www.w3.org/WAI/WCAG21/Techniques/general/G200.html',
    ]),
    '#type' => 'checkbox',
    '#default_value' => $get_default_value('target', FALSE) === '_blank',
    '#weight' => 3,
    '#states' => [
      'visible' => [
        ':input[name="attributes[target]"]' => ['checked' => TRUE],
      ],
      'required' => [
        ':input[name="attributes[target]"]' => ['checked' => TRUE],
      ],
    ],
  ];

  $form['advanced'] = [
    '#type' => 'details',
    '#title' => t('Advanced settings'),
    '#weight' => 4,
  ];

  $form['attributes']['title'] = [
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#description' => t(
      'Populates the title attribute of the link, usually shown as a small tooltip on hover.'
    ),
    '#default_value' => '',
    '#maxlength' => 512,
    '#group' => 'advanced',
  ];

  $form['attributes']['id'] = [
    '#type' => 'textfield',
    '#title' => t('ID'),
    '#description' => t(
      'Allows linking to this content using a URL fragment (#). Must be unique.'
    ),
    '#default_value' => $get_default_value('id'),
    '#maxlength' => 512,
    '#group' => 'advanced',
  ];

  // Add validation callback for empty attributes.
  array_unshift(
    $form['#validate'],
    '_infofinland_ckeditor4_attributes_validate'
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function infofinland_ckeditor4_form_linkit_editor_dialog_form_alter(&$form, FormStateInterface $form_state) {
  infofinland_ckeditor4_form_editor_link_dialog_alter($form, $form_state);
}

/**
 * Validation for link attributes.
 *
 * String "true" / "false" values are handled in javascript.
 * See: ./modules/infofinland_ckeditor4/assets/js/plugins/hds-button/plugin.js.
 */
function _infofinland_ckeditor4_attributes_validate(array &$form, FormStateInterface $form_state) {
  $attributes = $form_state->getValue('attributes');

  // Allow icons only for the links with button design.
  if (isset($attributes['data-selected-icon'])) {
    if ($attributes['data-design'] === 'link' || empty($attributes['data-selected-icon'])) {
      $form_state->unsetValue(['attributes', 'data-selected-icon']);
    }
  }

  // Remove empty values to prevent rendering them in markup.
  foreach (['target', 'target_check', 'title'] as $attribute) {
    if (isset($attributes[$attribute]) && empty($attributes[$attribute])) {
      $form_state->setValue(['attributes', $attribute], FALSE);
    }
  }

  // If the accessibility consent is not accepted,
  // uncheck the open in new window / tab checkbox.
  if ($attributes['target'] && !$attributes['target_check']) {
    $form_state->setValue(['attributes', 'target'], FALSE);
  }

  // Check if user has input value to href attribute.
  if (array_key_exists('href', $attributes) && !empty($attributes['href'])) {
    // Get Url object based on the href attribute.
    $url = UrlHelper::parse($attributes['href']);

    // Check if current link is external (not whitelisted) and
    // set data attributes accordingly.
    /** @var \Drupal\helfi_api_base\Link\InternalDomainResolver $resolver */
    $resolver = \Drupal::service('helfi_api_base.internal_domain_resolver');
    $is_external = $resolver->isExternal($url);

    // Set form value is-external based on domain resolver.
    $form_state->setValue(['attributes', 'data-is-external'], $is_external ? 'true' : 'false');

    // Parse URL scheme from the href attribute and set it as data variable.
    $scheme = parse_url(($is_external) ? $url->getUri() : $attributes['href'], PHP_URL_SCHEME);

    // Check for tel-link.
    $scheme = (empty($scheme) && str_contains($attributes['href'], 'tel:')) ? 'tel' : $scheme;

    // Construct a protocol value for external links if user has not selected
    // any value for the protocol.
    if ($is_external && empty($scheme) && $attributes['data-protocol'] === 'false') {
      $scheme = ($scheme === 'https' || $scheme === 'http') ? $scheme . '://' : $scheme;
    }

    // Set scheme to data-protocol attribute.
    $form_state->setValue(['attributes', 'data-protocol'], !(empty($scheme)) ? $scheme : 'false');
  }
}
