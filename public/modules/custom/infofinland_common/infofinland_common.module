<?php

/**
 * @file
 * Infofinland Common module.
 */

declare(strict_types=1);

use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Entity\EntityForm;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Url;
use Drupal\editor\Entity\Editor;
use Drupal\media\Entity\Media;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\path_alias\PathAliasInterface;
use Drupal\user\Entity\User;

/**
 * Implements hook_cron().
 */
function infofinland_common_cron() {
  $last_run = \Drupal::state()->get('infofinland_common_orphan_paragraph_delete.last_run', 0);
  $time_now = \Drupal::time()->getRequestTime();
  $frequency = 86400;

  // Run once in 24hrs.
  if (($time_now - $last_run) < $frequency) {
    return;
  }

  $purger = \Drupal::service('entity_reference_revisions.orphan_purger');
  $purger->setBatch(['paragraph']);

  \Drupal::state()->set('infofinland_common_orphan_paragraph_delete.last_run', $time_now);

}

/**
 * Implements hook_form_alter().
 */
function infofinland_common_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $form['#attached']['library'][] = 'infofinland_common/infofinland_common';
  // Hide field from HDBT theme we don't want.
  $form['color_palette']['#access'] = FALSE;

  if ($form_id === 'node_page_edit_form') {
    $form['actions']['submit']['#submit'][] = '_infofinland_common_redirect_function';
  }

  if ($form_id === 'user_form' || $form_id === 'node_link_edit_form' || $form_id === 'node_link_form') {
    $current_user = \Drupal::currentUser();
    $roles = $current_user->getRoles();

    // Show user municipality field for certain roles.
    if (!in_array('infofinland_user', $roles) && !in_array('admin', $roles)) {
      $form['field_municipality']['#access'] = FALSE;
      $form['admin_metainformation']['#access'] = FALSE;
    }
  }

  // Limit the autocomplete widget on the menu link page
  // to only landing pages and basic pages.
  if ($form_id === 'menu_link_content_menu_link_content_form') {
    $form['link']['widget'][0]['uri']['#selection_handler'] = 'default:node';
    $form['link']['widget'][0]['uri']['#selection_settings'] = [
      'target_bundles' => [
        'landing_page' => 'landing_page',
        'page' => 'page',
      ],
    ];
  }
}

/**
 * Stay at node edit form after save.
 */
function _infofinland_common_redirect_function(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\Core\Entity\EntityForm $form_object */
  $form_object = $form_state->getFormObject();
  if ($form_object instanceof EntityForm) {
    $entity = $form_object->getEntity();

    // Remove destination query string from request.
    \Drupal::request()->query->remove('destination');
    $url = Url::fromRoute('entity.node.edit_form', ['node' => $entity->id()]);
    $form_state->setRedirectUrl($url);
    return;
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function infofinland_common_path_alias_update(PathAliasInterface $path_alias) {
  $path_alias_manager = \Drupal::entityTypeManager()->getStorage('path_alias');
  // Load translated path aliases.
  $alias_objects = $path_alias_manager->loadByProperties([
    'path' => $path_alias->get('path')->value,
  ]);

  foreach ($alias_objects as $alias_object) {
    // Update existing aliases if those don't match with current alias.
    if ($alias_object->get('alias')->value !== $path_alias->get('alias')->value) {
      $alias_object->set('alias', $path_alias->get('alias')->value);
      $alias_object->save();
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function infofinland_common_preprocess_status_messages(&$variables) {
  if (isset($variables['message_list']['warning'])) {
    $status_messages = $variables['message_list']['warning'];
    foreach ($status_messages as $message) {
      if (!is_string($message) && !$message instanceof Stringable) {
        continue;
      }

      if (str_contains((string) $message, 'The current translation is not in sync with the Finnish one')) {
        $variables['attributes']['class'] = 'custom-messages--warning';
      }
    }
  }
}

/**
 * Implements hook_entity_prepare_form_HOOK().
 *
 * Adding and removing municipality info paragraphs
 * for municipality pages before form.
 */
function infofinland_common_entity_prepare_form(EntityInterface $entity, $operation, FormStateInterface $form_state) {
  if ($entity->bundle() !== 'page') {
    return;
  }

  if ($entity->get('field_municipality_selection')->isEmpty()) {
    return;
  }

  $national_page_ids = [];
  $existing_municipality_info_paragraph_ids = [];

  // Get municipality liftup paragraphs
  // that have a reference to this (municipality) page.
  $drupal_db = \Drupal::database();
  $results = $drupal_db->select('paragraph__field_municipality_page', 'pfmp')
    ->fields('pfmp', ['entity_id'])
    ->condition('field_municipality_page_target_id', $entity->id());
  $municipality_liftup_paragraph_ids = $results->execute()->fetchCol();

  // Get parent page ids of the municipality paragraphs.
  foreach ($municipality_liftup_paragraph_ids as $paragraph_id) {
    $paragraph = \Drupal::entityTypeManager()->getStorage('paragraph')->load($paragraph_id);
    if (!$parent = $paragraph->getParentEntity()) {
      continue;
    }
    if ($parent->getType() !== 'municipality_liftup') {
      continue;
    }
    if (!$parent_node = $parent->getParentEntity()) {
      continue;
    }
    $national_page_ids[] = $parent_node->id();
  }

  // Remove duplicate parent node values.
  $national_page_ids = array_unique($national_page_ids);

  if ($entity->hasField('field_municipality_info')) {
    $field_municipality_info_values = $entity->get('field_municipality_info')->getValue();

    foreach ($field_municipality_info_values as $key => $field_municipality_info_value) {
      if (!$municipality_info_paragraph = \Drupal::entityTypeManager()->getStorage('paragraph')->load($field_municipality_info_value['target_id'])) {
        continue;
      }
      $existing_municipality_info_paragraph_id = $municipality_info_paragraph->get('field_national_page')->getString();

      // Remove paragraphs that aren't referenced from national pages anymore.
      if (!in_array($existing_municipality_info_paragraph_id, $national_page_ids)) {
        $entity->get('field_municipality_info')->removeItem($key);
        $entity->save();
        $municipality_info_paragraph->delete();
        continue;
      }
      $existing_municipality_info_paragraph_ids[] = $existing_municipality_info_paragraph_id;
    }
  }

  // Create new municipality info paragraphs, if those aren't yet existing.
  foreach ($national_page_ids as $key => $national_page_id) {
    if (!in_array($national_page_id, $existing_municipality_info_paragraph_ids)) {

      $paragraph = Paragraph::create([
        'type' => 'municipality_info',
      ]);
      $paragraph->isNew();
      $paragraph->set('field_national_page', $national_page_id);

      $field_municipality_info = $entity->get('field_municipality_info');
      $field_municipality_info->appendItem($paragraph);
    }
  }
}

/**
 * Hide fields for node page form.
 */
function _infofinland_common_hide_form_fields(&$form) {
  $current_user = \Drupal::currentUser();
  $roles = $current_user->getRoles();

  $form['actions']['preview']['#access'] = FALSE;

  // Disable title field from municipal user.
  if (in_array('municipal_editor', $roles)) {
    $form['title']['#disabled'] = TRUE;
  }

  // Show municipality selection field only for certain roles.
  if (!in_array('infofinland_user', $roles) && !in_array('admin', $roles)) {
    $form['field_municipality_selection']['#access'] = FALSE;
    $form['field_url']['#access'] = FALSE;
    $form['field_theme_menu']['#access'] = FALSE;
    $form['admin_metainformation']['#access'] = FALSE;
    $form['field_metatags']['#access'] = FALSE;
    $form['field_feedback_email']['#access'] = FALSE;
    $form['field_layout']['#access'] = FALSE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Media form alter.
 */
function infofinland_common_form_media_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'media_image_add_form' || $form_id === 'media_image_edit_form') {
    $current_user = \Drupal::currentUser();
    $roles = $current_user->getRoles();

    // Show municipality field only for certain roles.
    if (!in_array('infofinland_user', $roles) && !in_array('admin', $roles)) {
      $form['field_municipality']['#access'] = FALSE;
      $form['revision_information']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function infofinland_common_inline_entity_form_entity_form_alter(&$form, &$form_state) {
  $current_user = \Drupal::currentUser();
  $roles = $current_user->getRoles();

  // Show municipality field only for certain roles.
  if (!in_array('infofinland_user', $roles) && !in_array('admin', $roles)) {
    $form['field_municipality']['#access'] = FALSE;
    $form['revision_information']['#access'] = FALSE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Node page add form.
 */
function infofinland_common_form_node_page_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id !== 'node_page_form') {
    return;
  }
  $node = $form_state->getFormObject()->getEntity();

  // If municipality is not set, hide info field.
  if ($node->get('field_municipality_selection')->isEmpty()) {
    $form['field_municipality_info']['#access'] = FALSE;
  }

  _infofinland_common_hide_form_fields($form);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function infofinland_common_form_node_page_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id != 'node_page_edit_form') {
    return;
  }
  $form['actions']['submit']['#submit'][] = '_infofinland_common_redirect_function';
  $node = $form_state->getFormObject()->getEntity();
  _infofinland_common_hide_form_fields($form);

  // If municipality is not set or there's no reference from national page,
  // hide info paragraphs field.
  if (
    $node->get('field_municipality_selection')->isEmpty() ||
    $node->get('field_municipality_info')->isEmpty()
  ) {
    $form['field_municipality_info']['#access'] = FALSE;
  }

  if ($node->id() !== NULL) {
    if ($node->langcode->value === 'fi') {
      return;
    }
    $contentFi = $node->getTranslation('fi')->get('field_content')->referencedEntities();
    $contentCountFi = count($contentFi);
    $currentNode = $node->get('field_content')->referencedEntities();
    $contentCountCurrent = count($currentNode);
    if ($contentCountCurrent !== $contentCountFi) {
      \Drupal::messenger()->addWarning('The current translation is not in sync with the Finnish one');
      return;
    }
    else {
      for ($x = 0; $x < $contentCountCurrent; $x++) {
        if ($currentNode[$x]->getType() !== $contentFi[$x]->getType()) {
          \Drupal::messenger()->addWarning('The current translation is not in sync with the Finnish one');
          return;
        }
      }
    }
  }
}

/**
 * Implements hook_editor_js_settings_alter().
 *
 * Change ckeditor lang direction to RTL for Persian and Arabic.
 */
function infofinland_common_editor_js_settings_alter(array &$settings) {
  $content_language = \Drupal::languageManager()->getCurrentLanguage(LanguageInterface::TYPE_CONTENT)->getId();
  $rtl_languages = ['fa', 'ar'];
  if (in_array($content_language, $rtl_languages)) {
    foreach ($settings['editor']['formats'] as $name => $value) {
      $settings['editor']['formats'][$name]['editorSettings']['contentsLangDirection'] = 'rtl';
    }
  }
}

/**
 * Implements hook_page_attachments().
 *
 * Add RTL styles for node page form.
 */
function infofinland_common_page_attachments(array &$attachments) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();

  if ($theme !== 'infofinland_admin') {
    return;
  }

  $content_language = \Drupal::languageManager()->getCurrentLanguage(LanguageInterface::TYPE_CONTENT);
  $rtl_languages = ['fa', 'ar'];
  if (in_array($content_language->getId(), $rtl_languages)) {
    $attachments['#attached']['library'][] = 'infofinland_common/infofinland_admin_rtl';
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Fill link node field_municipality dynamically for municipality user.
 */
function infofinland_common_node_presave(Node $entity) {
  if ($entity->getType() === 'link') {
    $current_user = \Drupal::currentUser();
    $roles = $current_user->getRoles();

    if (!in_array('infofinland_user', $roles) && !in_array('admin', $roles)) {
      $user = User::load($current_user->id());
      if (!empty($user->get('field_municipality')->getString())) {
        $user_municipalities = explode(', ', $user->get('field_municipality')->getString());

        foreach ($user_municipalities as $user_municipality) {
          $multi_value[] = ['target_id' => $user_municipality];
          $entity->set('field_municipality', $multi_value);
        }
      }
    }
  }

  if ($entity->getType() === 'page') {
    $theme_menu = $entity->get('field_theme_menu')->getString();
    $entity->set('field_theme_menu_machine_name', $theme_menu);

    if ($entity->langcode->value === 'fi') {
      $entity->set('field_finnish_title', $entity->get('title')->getString());
    }

    _infofinland_common_add_paragraphs_to_node_translations($entity);
  }
}

/**
 * Custom function for adding paragraphs from finnish page node to translations.
 *
 * #UHF-10742: This feature caused timeout and is moved to queue plugin.
 */
function _infofinland_common_add_paragraphs_to_node_translations(EntityInterface $entity): void {
  if (
    !$entity instanceof NodeInterface ||
    is_null($entity->id()) ||
    $entity->langcode->value !== 'fi'
  ) {
    return;
  }

  $field_content_original = $entity->original->get('field_content')->getValue();
  $field_content_new = $entity->get('field_content')->getValue();

  $old_ids = [];
  foreach ($field_content_original as $row) {
    $old_ids[] = $row['target_id'];
  }

  $added_paragraphs = [];
  foreach ($field_content_new as $key => $new_row) {
    if (!in_array($new_row['target_id'], $old_ids)) {
      $added_paragraphs[] = [
        'target' => $new_row['target_id'],
        'delta' => $key,
        'revision' => $new_row['target_revision_id'],
      ];
    }
  }

  if (empty($added_paragraphs)) {
    return;
  }

  $item_to_queue = [
    'nid' => $entity->id(),
    'data' => json_encode($added_paragraphs)
  ];

  /** @var \Drupal\Core\Queue\QueueFactoryInterface $queue_factory */
  $queue_factory = \Drupal::service('queue');
  $queue_factory->get('paragraph_copy_worker')
    ->createItem($item_to_queue);
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Fill municipality_liftup_item paragraphs field_municipality dynamically.
 */
function infofinland_common_paragraph_presave(Paragraph $entity) {
  if ($entity->getType() !== 'municipality_liftup_item') {
    return;
  }
  if (!$nid = $entity->get('field_municipality_page')->getString()) {
    return;
  }
  if (!$municipality_node = \Drupal::entityTypeManager()->getStorage('node')->load($nid)) {
    return;
  }
  if (!$municipality_tax_id = $municipality_node->get('field_municipality_selection')->getString()) {
    return;
  }
  $entity->set('field_municipality', ['target_id' => $municipality_tax_id]);

  $alias_url = \Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $nid);
  $entity->set('field_municipality_page_url', $alias_url);
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Add municipality from user to media.
 */
function infofinland_common_media_presave(Media $entity) {
  if ($entity->bundle() !== 'image') {
    return;
  }

  $current_user = \Drupal::currentUser();
  $user = User::load($current_user->id());
  $user_municipalities = explode(', ', $user->get('field_municipality')->getString());
  $municipalities = explode(', ', $entity->get('field_municipality')->getString());
  $new_municipalities = array_unique(array_merge($municipalities, $user_municipalities));

  foreach ($new_municipalities as $new_municipality) {
    $multi_value[] = ['target_id' => $new_municipality];
    $entity->set('field_municipality', $multi_value);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function infofinland_common_form_user_login_form_alter(&$form, FormStateInterface $form_state) {
  $form['#submit'][] = 'infofinland_common_user_login_submit';
}

/**
 * Form submission handler for user_login_form().
 *
 * Redirects the user to the content page after logging in.
 */
function infofinland_common_user_login_submit(&$form, FormStateInterface $form_state) {
  $url = Url::fromRoute('view.content.page_1');

  // Check if a destination was set, probably on an exception controller.
  // @see \Drupal\user\Form\UserLoginForm::submitForm()
  $request = \Drupal::service('request_stack')->getCurrentRequest();
  if (!$request->request->has('destination')) {
    $form_state->setRedirectUrl($url);
  }
  else {
    $request->query->set('destination', $request->request->get('destination'));
  }
}

/**
 * Implements hook_ckeditor_css_alter().
 */
function infofinland_common_ckeditor_css_alter(array &$css, Editor $editor) {
  if (!$editor->hasAssociatedFilterFormat()) {
    return;
  }

  $known_formats = [
    'basic_html',
    'full_html',
  ];

  if (in_array($editor->getFilterFormat()->id(), $known_formats)) {
    $css[] = \Drupal::service('extension.list.module')->getPath('infofinland_common') . '/css/infofinland_admin_ckeditor.css';
  }
}

/**
 * Implements hook_library_info_alter().
 *
 * Fix media entity browser styles.
 */
function infofinland_common_library_info_alter(&$libraries, $extension) {
  if ($extension == 'media_entity_browser' && isset($libraries['view'])) {
    unset($libraries['view']['css']);
  }
}

/**
 * Implements hook_entity_type_alter().
 *
 * Temp fix for this issue: https://www.drupal.org/project/drupal/issues/2955321
 */
function infofinland_common_entity_type_alter(array &$entity_types) {
  foreach ($entity_types as $entity_type) {
    $constraints = $entity_type->getConstraints();
    unset($constraints['EntityUntranslatableFields']);
    $entity_type->setConstraints($constraints);
  }
}

/**
 * Implements hook_elasticsearch_connector_load_library_options_alter().
 */
function infofinland_common_elasticsearch_connector_load_library_options_alter(&$options, &$context) {
  // Set cURL options to trust self-signed certificate.
  // @todo instead of disabling verification, set CURLOPT_SSLCERT.
  $options['curl'][CURLOPT_SSL_VERIFYPEER] = FALSE;
  $options['curl'][CURLOPT_SSL_VERIFYHOST] = FALSE;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function infofinland_common_preprocess_html(&$variables) {
  $variables['attributes']['class'][] = 'infofinland-admin';
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Orders entity reference query by length
 * so autocomplete shows the exact match at the top.
 *
 * @see https://www.drupal.org/project/drupal/issues/3304175
 * @see \Drupal\Core\Entity\Plugin\EntityReferenceSelection\DefaultSelection::buildEntityQuery()
 */
function infofinland_common_query_entity_reference_alter(AlterableInterface $query): void {
  if (!$query->hasAllTags('entity_query', 'entity_query_node')) {
    return;
  }

  $title_field = 'node_field_data.title';
  $conditions = $query->conditions();

  if (empty($conditions) || !isset($conditions[0]['field'])) {
    return;
  }

  $has_title = FALSE;
  foreach ($conditions as $condition) {
    if (is_array($condition) && $condition['field'] === $title_field) {
      $has_title = TRUE;
    }
  }

  if (!$has_title) {
    return;
  }

  $query->addExpression("LENGTH($title_field)", 'title_length');
  $query->orderBy('title_length');

  // Prevent a mysql error.
  if (!empty($query->getGroupBy())) {
    $query->groupBy('title_length');
  }
}
