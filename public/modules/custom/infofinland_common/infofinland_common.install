<?php

/**
 * @file
 * Contains installation tasks common module.
 */

declare(strict_types=1);

/**
 * Handle filter token.
 */
function infofinland_common_update_9001(): void {
  // Remove filter token from full_html format.
  $full_format = Drupal::configFactory()
    ->getEditable('filter.format.full_html');
  $raw_data = $full_format->getRawData();

  if (($key = array_search('token_filter', $raw_data['dependencies']['module'])) !== FALSE) {
    unset($raw_data['dependencies']['module'][$key]);
  }
  if (array_key_exists('token_filter', $raw_data['filters'])) {
    unset($raw_data['filters']['token_filter']);
  }
  $full_format->setData($raw_data);
  $full_format->save();
}

/**
 * Disable modules.
 */
function infofinland_common_update_9002(): void {
  /** @var \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler */
  $moduleHandler = \Drupal::service('module_handler');

  /** @var \Drupal\Core\Extension\ModuleInstallerInterface $moduleInstaller */
  $moduleInstaller = \Drupal::service('module_installer');

  try {
    $modules_to_disable = [
      'ckeditor',
      'ckeditor_bidi',
      'config_filter',
      'config_replace',
      'hdbt_component_library',
      'hdbt_content',
      'hdbt_hyphenopoly',
      'infofinland_ckeditor',
      'node_revision_delete',
    ];

    // Load the existing configuration.
    $config = \Drupal::configFactory()->getEditable('core.extension');

    // Get the current list of enabled modules.
    $enabled_modules = $config->get('module') ?? [];

    // Disable the specified modules.
    foreach ($modules_to_disable as $module) {
      if (isset($enabled_modules[$module])) {
        unset($enabled_modules[$module]);
      }
    }

    // Update the configuration with the new list of enabled modules.
    $config->set('module', $enabled_modules);
    $config->save();

    // Rebuild module data that is stored in state.
    \Drupal::service('extension.list.module')->reset();

    // Rebuild all information based on new module data.
    \Drupal::moduleHandler()->invokeAll('rebuild');

    // Try uninstalling modules that are no longer installed.
    $moduleInstaller->uninstall($modules_to_disable);

    // Install phpass if it is not installed.
    if (!$moduleHandler->moduleExists('phpass')) {
      $moduleInstaller->install(['phpass']);
    }
  }
  catch (\Exception $e) {
    echo $e->getMessage();
  }
}

/**
 * Implements hook_update_N().
 */
function infofinland_common_update_9003(): void {
  \Drupal::service('database')->delete('key_value')->condition('name', 'config_replace')->execute();
  \Drupal::service('database')->delete('key_value')->condition('name', 'hdbt_component_library')->execute();
  \Drupal::service('database')->delete('key_value')->condition('name', 'hdbt_content')->execute();
  \Drupal::service('database')->delete('key_value')->condition('name', 'hdbt_hyphenopoly')->execute();
  \Drupal::service('database')->delete('key_value')->condition('name', 'node_revision_delete')->execute();
  \Drupal::service('database')->delete('key_value')->condition('name', 'infofinland_ckeditor')->execute();
}

/**
 * Delete expired tokens.
 *
 * @see \simple_oauth_cron()
 * @see \Drupal\simple_oauth\ExpiredCollector
 */
function infofinland_common_update_9004(): void {
  $time = \Drupal::time();
  $database = \Drupal::database();

  $database->delete('oauth2_token')
    ->condition('expire', $time->getRequestTime(), '<')
    ->execute();
}

/**
 * Remove gdpr log file if exists.
 */
function infofinland_common_update_9005(): void {
  $logFilePath = 'sites/default/files/logs/infofinland_gdpr.log';
  if (file_exists($logFilePath)) {
    unlink($logFilePath);
  }
}

/**
 * Update ownership of broken nodes.
 */
function infofinland_common_update_9006(&$sandbox): void {
  $entity_storage = \Drupal::entityTypeManager()->getStorage('node');
  // List of nodes affected by the error.
  $nids = [
    32086,39409,39412,39414,39417,39420,39422,39429,
    39434,39440,39441,39442,39443,39453,39460,39469,
    39475,39478,39479,39481,39483,
    39491,39494,39495,39498,39499,39500,39501,39502,
    39504,39508,39512,39513,39514,39515,39516,39517,
    39518,39519,39520,39521,39523,39524,39525, 39526,
    39527,39528,39529,39530,39531,39532,39533,39534,
    39535,39536,39537,39538,39539,39540,39541,39542,
    39543,39544,39545,39546,39548,39549,39551,39554,
    39555,39556,39557,39564,39565,39566,39567,39569,
    39573,39574,39575,39578,39579,39580,39582,39583,
    39584,39585,39588,39589,39591,39594,39595,39597,
    39598,39599,39600,39601,39602,39603,39605,39606,
    39607,39608,39610,39611,39612,39613,39614,39615,
    39616,39619,39620,39621,39623,39624,39625,39626,
    39627,39628,39629,39631,39632,39633,39636,39637,
    39638,39639,39640,39641,39642,39644,39645,39818,
    39828,39833,41122,41514,42065,42466,42472,43739,
    48137
  ];

  if (!isset($sandbox['total'])) {
    $sandbox['total'] = count($nids);
    $sandbox['current'] = 0;

    if (empty($sandbox['total'])) {
      $sandbox['#finished'] = 1;
      return;
    }
  }

  $batch_size = 10;
  $nodes = $entity_storage->loadMultiple(array_splice($nids, $sandbox['current'], $batch_size));

  if (empty($nodes)) {
    $sandbox['#finished'] = 1;
    return;
  }

  foreach ($nodes as $node) {
    $node->setOwnerId(0);
    $node->setNewRevision(FALSE);
    $node->save();
    $sandbox['current']++;
  }

  \Drupal::messenger()
    ->addMessage($sandbox['current'] . ' nodes processed');

  if ($sandbox['current'] >= $sandbox['total']) {
    $sandbox['#finished'] = 1;
  }
  else {
    $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
  }

}
