<?php

/**
 * @file
 * Helper functions related to deleting user accounts.
 *
 * This is in a separate module so it can be turned off easier
 * and we can reassign module weights / run order if necessary.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\user\UserInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;

/**
 * Implements hook_module_implements_alter().
 */
function infofinland_user_cancel_module_implements_alter(&$implementations, $hook) : void {
  // Move infofinland_user_cancel_user_cancel() implementation to the top of the
  // list, so this is always run first before any other alter hooks, more
  // specifically before 'node_user_cancel()' which causes issues when mass
  // reassigning node revisions.
  if ($hook === 'user_cancel') {
    $group = $implementations['infofinland_user_cancel'];
    $implementations = ['infofinland_user_cancel' => $group] + $implementations;
  }
}

/**
 * Implements hook_user_cancel().
 *
 * This has to run before node module's user_cancel hook.
 */
function infofinland_user_cancel_user_cancel($edit, UserInterface $account, $method) {
  switch ($method) {
    case 'user_cancel_reassign':
      // Anonymize all of the nodes for this old account.
      _infofinland_user_cancel_reassign_nodes_to_anonymous($account);
      break;
  }
}

/**
 * Reassigns all node revisions by $account to by owned by anonymous (uid 0).
 *
 * Prevents crashes and timeouts when revisions are handled by node module hook.
 *
 * @param \Drupal\user\UserInterface $account
 *   The user.
 */
function _infofinland_user_cancel_reassign_nodes_to_anonymous(UserInterface $account): void {

  $database = \Drupal::database();
  $tables = [
    'node_field_data' => 'uid',
    'node_field_revision' => 'uid',
    'node_revision' => 'revision_uid',
  ];

  $user_id = $account->id();
  foreach ($tables as $table => $uid_field) {
    $matches = $database->select($table)
      ->condition($uid_field, $user_id)
      ->countQuery()
      ->execute()
      ->fetchField();

    if ((int) $matches < 1) {
      continue;
    }

    $database->update($table)
      ->fields([$uid_field => 0])
      ->condition($uid_field, $user_id)
      ->execute();
    \Drupal::logger('infofinland_user_cancel')->notice(t('Set @count rows from @table to 0 from @uid',
      [
        '@count' => $matches,
        '@table' => $table,
        '@uid' => $user_id,
      ]
    ));
  }
}

/**
 * Implements hook_entity_operation().
 */
function infofinland_user_cancel_entity_operation(EntityInterface $entity): array {
  // Add sanitize user account -operation to user action list.
  $operations = [];

  /** @var \Drupal\user\UserInterface $current_user */
  $current_user = \Drupal::currentUser();
  if (
    $entity instanceof UserInterface &&
    $current_user->hasPermission('sanitize user accounts') &&
    $entity->isBlocked()
  ) {
    $operations['sanitize_user_entity'] = [
      'title' => t('Sanitize user account'),
      'url' => Url::fromRoute('infofinland_user_cancel.user_sanitize', ['user' => $entity->id()]),
      'weight' => 50,
    ];
  }
  return $operations;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function infofinland_user_cancel_form_user_form_alter(array &$form, FormStateInterface &$form_state, $form_id): void {
  if ($form_id !== 'user_form') {
    return;
  }

  /** @var \Drupal\user\UserInterface $current_user */
  $current_user = \Drupal::currentUser();

  /** @var \Drupal\user\UserInterface $entity */
  $entity = \Drupal::routeMatch()->getParameter('user');

  // Add sanitize user account -operation to user actions if the current user
  // has the 'sanitize user accounts' permission and the user is blocked.
  if (
    $entity instanceof UserInterface &&
    $current_user->hasPermission('sanitize user accounts') &&
    $entity->isBlocked()
  ) {
    $destination = Url::fromRoute(
      'entity.user.canonical',
      ['user' => $entity->id()]
    )->toString();

    $form['actions']['sanitize'] = [
      '#attributes' => [
        'class' => [
          'button',
          'button--danger',
        ],
      ],
      '#button_type' => 'danger',
      '#title' => t('Sanitize account'),
      '#type' => 'link',
      '#url' => Url::fromRoute(
        'infofinland_user_cancel.user_sanitize',
        ['user' => $entity->id()],
        ['query' => ['destination' => $destination]],
      ),
      '#weight' => 11,
    ];
  }
}
