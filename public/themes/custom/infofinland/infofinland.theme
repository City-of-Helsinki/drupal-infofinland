<?php

/**
 * @file
 * Functions to support theming in the Infofinland Subtheme.
 */

declare(strict_types=1);

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Language\LanguageInterface;

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function infofinland_theme_suggestions_block_alter(&$suggestions) {
  // Load theme suggestions for blocks from parent theme.
  foreach ($suggestions as &$suggestion) {
    $suggestion = str_replace('infofinland_', '', $suggestion);
  }
}

/**
 * Implements template_preprocess_form.
 */
function infofinland_form_tfa_entry_form_alter(&$variables): void {
  $variables['#attributes']['class'][] = 'container';
}

/**
 * Implements hook_preprocess_html().
 */
function infofinland_preprocess_html(&$variables) {
  // Add in no-index header.
  $noindex = [
    '#tag' => 'meta',
    '#attributes' => [
      'name' => 'robots',
      'content' => 'NOINDEX, NOFOLLOW',
    ],
  ];

  $variables['page']['#attached']['html_head'][] = [$noindex, 'no-index'];

  $content_language = \Drupal::languageManager()->getCurrentLanguage(LanguageInterface::TYPE_CONTENT);

  // If current language is read from right to left, load RTL styles.
  if ($content_language->getDirection() === 'rtl') {
    $variables['#attached']['library'][] = 'infofinland/global-styling-rtl';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function infofinland_preprocess_block__system_branding_block(&$variables) {
  // Add theme icons path to variables.
  $infofinland_theme = \Drupal::service('theme_handler')->getTheme('infofinland');
  if ($infofinland_theme) {
    $variables['icons_path'] = '/' . $infofinland_theme->getPath() . '/logo.svg';
  }
}

if (!function_exists('hdbt_admin_tools_get_page_entity')) {

  /**
   * HDBT dependency, gets the current page main entity.
   *
   * @return \Drupal\Core\Entity\EntityInterface|null
   *   Current page main entity.
   */
  function hdbt_admin_tools_get_page_entity(): ?EntityInterface {
    $page_entity = &drupal_static(__FUNCTION__, NULL);
    if (!empty($page_entity)) {
      return $page_entity;
    }
    $types = array_keys(Drupal::entityTypeManager()->getDefinitions());
    $route = Drupal::routeMatch();
    $params = $route->getParameters()->all();

    foreach ($types as $type) {
      foreach (['revision' => $type . '_revision', 'canonical' => $type] as $route_name => $version) {
        if (!empty($params[$version]) && $route->getRouteName() === "entity.$type.$route_name") {
          return $params[$version];
        }
      }
    }

    return NULL;
  }

}
